kernel AGC(
    scale: f32 = 1.0, /// output scale value
    alpha: f32, /// feed-back gain
    state g: f32 = 1.0, /// current gain value
    state is_locked: bool, /// AGC locked flag
    in x: <c32>,
    out y: <c32>
){
    // apply gain to input sample
    y = x * g;

    // compute output signal energy
    let y2 = (y * y.conj()).re();

    // smooth energy estimate using single-pole low-pass filter
    let smoothed_energy_estimate = (1.0 - alpha) * y2' + alpha * y2;

    if (is_locked) {
        return;
    }

    // update gain according to output energy
    if smoothed_energy_estimate > 1e-6 {
        g *= (-0.5*alpha * smoothed_energy_estimate.log()).exp();
    }

    // clamp to 120 dB gain
    g = g.min(1e6);

    // let gain_multiplier = smoothed_energy_estimate.map(|x| if x > 1e-6 { (-0.5*alpha * x.log()).exp() } else { 1 });
    // let gain_multiplier = smoothed_energy_estimate.when(x > 1e-6, (-0.5*alpha * x.log()).exp(), 1);
    // let gain_multiplier = if x > 1e-6 { (-0.5*alpha * x.log()).exp() } else { 1 } for x in smoothed_energy_estimate;
    // let gain_multiplier = if smoothed_energy_estimate > 1e-6 {
    //     (-0.5*alpha * smoothed_energy_estimate.log()).exp();
    // } else {
    //     1
    // };
    // g = (g' * gain_multiplier).min(1e6);

    y *= scale;
}